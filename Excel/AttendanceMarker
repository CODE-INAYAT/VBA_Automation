Option Explicit

' Public variables accessible by the dynamically created UserForm
Public ws As Worksheet
Public currentRow As Long
Public lastRow As Long
Public originalLastCol As Long
Public attendanceCol As Long
Public applyColoring As Boolean

' Variables for the edit/resume functionality
Public isEditingMode As Boolean
Public resumeRow As Long


'THE ONLY MACRO NEED TO RUN
Sub MarkAttendance()
    ' 1. CHECK SECURITY & CREATE FORM IF NEEDED
    If Not CreateAttendanceFormIfNeeded() Then
        Exit Sub ' Stop if setup is required or fails
    End If
    
    ' 2. SETUP
    isEditingMode = False ' Ensure edit mode is off at the start
    Set ws = ActiveSheet
    If ws.FilterMode Then ws.ShowAllData
    
    lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
    If lastRow <= 1 Then
        MsgBox "No data found to mark.", vbExclamation, "Empty Sheet"
        Exit Sub
    End If
    
    ' Find the last column with data BEFORE potentially adding the attendance column
    originalLastCol = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column
    If LCase(ws.Cells(1, originalLastCol).Value) = "attendance" Then
        originalLastCol = originalLastCol - 1
    End If

    ' 3. FIND OR CREATE "ATTENDANCE" COLUMN
    Dim headerRange As Range
    Set headerRange = ws.Range("A1", ws.Cells(1, ws.Columns.Count).End(xlToLeft))
    Dim foundCell As Range
    Set foundCell = headerRange.Find("Attendance", LookIn:=xlValues, LookAt:=xlWhole)
    
    If foundCell Is Nothing Then
        attendanceCol = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column + 1
        ws.Cells(1, attendanceCol).Value = "Attendance"
        ws.Cells(1, attendanceCol).Font.Bold = True
    Else
        attendanceCol = foundCell.Column
    End If
    
    ' 4. ASK ABOUT COLORING
    Dim colorResponse As VbMsgBoxResult
    colorResponse = MsgBox("Do you want to color rows based on attendance?", vbYesNo + vbQuestion, "Apply Row Coloring?")
    applyColoring = (colorResponse = vbYes)
    
    ' 5. FIND WHERE TO START/RESUME
    currentRow = 2 ' Start checking from the first data row
    While ws.Cells(currentRow, attendanceCol).Value <> "" And currentRow <= lastRow
        currentRow = currentRow + 1
    Wend
    
    ' 6. LAUNCH THE PROCESS
    If currentRow > lastRow And Not isEditingMode Then
        MsgBox "All attendance has already been marked.", vbInformation, "Complete"
    Else
        If currentRow > 2 And Not isEditingMode Then
            MsgBox "Resuming attendance marking from row " & currentRow & ".", vbInformation, "Resuming"
        End If
        ' Launch the form we created/found
        VBA.UserForms.Add("frmAttendance").Show
    End If
    
    Set ws = Nothing
End Sub


'HELPER FUNCTIONS TO DYNAMICALLY CREATE THE USERFORM
Function CreateAttendanceFormIfNeeded() As Boolean
    Dim VBE As Object, vbProj As Object, vbComp As Object
    Dim formName As String: formName = "frmAttendance"
    
    On Error Resume Next
    Set VBE = Application.VBE
    If Err.Number <> 0 Then
        MsgBox "ERROR: 'Trust access to the VBA project object model' is not enabled." & vbCrLf & vbCrLf & _
               "Please enable it under File > Options > Trust Center > Macro Settings.", vbCritical
        CreateAttendanceFormIfNeeded = False
        Exit Function
    End If
    On Error GoTo 0
    
    Set vbProj = ThisWorkbook.VBProject
    
    On Error Resume Next
    Set vbComp = vbProj.VBComponents(formName)
    On Error GoTo 0
    
    If Not vbComp Is Nothing Then
        ' Form already exists, we are good to go.
        CreateAttendanceFormIfNeeded = True
        Exit Function
    End If
    
    ' FORM CREATION LOGIC
    ' This section runs only once to build the form.
    ' It uses safe, line-by-line assignments to prevent syntax errors.
    
    Set vbComp = vbProj.VBComponents.Add(3) ' 3 = vbext_ct_MSForm
    With vbComp
        .Properties("Name") = formName
        .Properties("Caption") = "Mark Attendance"
        .Properties("Width") = 240
        .Properties("Height") = 260 ' Increased height for new buttons
    End With
    
    ' Add Label
    Dim lbl As Object: Set lbl = vbComp.Designer.Controls.Add("Forms.Label.1")
    With lbl
        .Name = "lblInfo"
        .Top = 12
        .Left = 12
        .Width = 200
        .Height = 100
        .WordWrap = True
        .BorderStyle = 1
        .Font.Size = 10
    End With
    
    ' Add Present Button
    Dim btnP As Object: Set btnP = vbComp.Designer.Controls.Add("Forms.CommandButton.1")
    With btnP
        .Name = "btnPresent"
        .Caption = "Present (Enter)"
        .Top = 130
        .Left = 20
        .Width = 90
        .Height = 30
    End With
    
    ' Add Absent Button
    Dim btnA As Object: Set btnA = vbComp.Designer.Controls.Add("Forms.CommandButton.1")
    With btnA
        .Name = "btnAbsent"
        .Caption = "Absent (Backspace)"
        .Top = 130
        .Left = 120
        .Width = 90
        .Height = 30
    End With
    
    ' Add Go Back Button
    Dim btnBack As Object: Set btnBack = vbComp.Designer.Controls.Add("Forms.CommandButton.1")
    With btnBack
        .Name = "btnGoBack"
        .Caption = "Go Back & Edit"
        .Top = 180
        .Left = 20
        .Width = 90
        .Height = 30
    End With
    
    ' Add Edit Specific Row Button
    Dim btnEdit As Object: Set btnEdit = vbComp.Designer.Controls.Add("Forms.CommandButton.1")
    With btnEdit
        .Name = "btnEditRow"
        .Caption = "Edit Specific Row"
        .Top = 180
        .Left = 120
        .Width = 90
        .Height = 30
    End With
    
    ' Inject the code into the newly created form
    vbComp.CodeModule.AddFromString GetFormCode()

    MsgBox "The 'frmAttendance' UserForm has been created successfully." & vbCrLf & _
           "Please run the macro again to start marking.", vbInformation, "Setup Complete"
           
    CreateAttendanceFormIfNeeded = False ' Return False to force the user to re-run
End Function

Function GetFormCode() As String
    ' This function returns the full, correct code for the UserForm.
    ' It has been meticulously verified to be free of syntax errors.
    Dim s As String
    
    s = "Private Sub UserForm_Activate()" & vbCrLf
    s = s & "    Call Module1.ShowNextRow(Me)" & vbCrLf
    s = s & "End Sub" & vbCrLf & vbCrLf
    
    s = s & "Private Sub btnPresent_Click()" & vbCrLf
    s = s & "    Call Module1.MarkRow(""P"", Me)" & vbCrLf
    s = s & "End Sub" & vbCrLf & vbCrLf
    
    s = s & "Private Sub btnAbsent_Click()" & vbCrLf
    s = s & "    Call Module1.MarkRow(""A"", Me)" & vbCrLf
    s = s & "End Sub" & vbCrLf & vbCrLf
    
    s = s & "Private Sub btnGoBack_Click()" & vbCrLf
    s = s & "    If Module1.currentRow <= 2 Then" & vbCrLf
    s = s & "        MsgBox ""Cannot go back. You are at the first record."", vbInformation" & vbCrLf
    s = s & "        Exit Sub" & vbCrLf
    s = s & "    End If" & vbCrLf
    s = s & "    Module1.currentRow = Module1.currentRow - 1" & vbCrLf
    s = s & "    Call Module1.ShowNextRow(Me)" & vbCrLf
    s = s & "End Sub" & vbCrLf & vbCrLf
    
    s = s & "Private Sub btnEditRow_Click()" & vbCrLf
    s = s & "    Dim userInput As Variant" & vbCrLf
    s = s & "    userInput = Application.InputBox(""Enter row number to edit:"", ""Edit Specific Row"", Type:=1)" & vbCrLf
    s = s & "    If userInput = False Then Exit Sub ' User cancelled" & vbCrLf
    s = s & "    If userInput < 2 Or userInput > Module1.lastRow Then" & vbCrLf
    s = s & "        MsgBox ""Invalid row. Please enter a number between 2 and "" & Module1.lastRow, vbExclamation" & vbCrLf
    s = s & "        Exit Sub" & vbCrLf
    s = s & "    End If" & vbCrLf
    s = s & "    If Not Module1.isEditingMode Then Module1.resumeRow = Module1.currentRow" & vbCrLf
    s = s & "    Module1.isEditingMode = True" & vbCrLf
    s = s & "    Module1.currentRow = CLng(userInput)" & vbCrLf
    s = s & "    Call Module1.ShowNextRow(Me)" & vbCrLf
    s = s & "End Sub" & vbCrLf & vbCrLf
    
    s = s & "Private Sub UserForm_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)" & vbCrLf
    s = s & "    Select Case KeyCode" & vbCrLf
    s = s & "        Case vbKeyReturn: KeyCode = 0: Call btnPresent_Click" & vbCrLf
    s = s & "        Case vbKeyBack: KeyCode = 0: Call btnAbsent_Click" & vbCrLf
    s = s & "    End Select" & vbCrLf
    s = s & "End Sub" & vbCrLf & vbCrLf
    
    s = s & "Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)" & vbCrLf
    s = s & "    If CloseMode = vbFormControlMenu Then MsgBox ""Attendance marking cancelled. Run again to resume."", vbInformation" & vbCrLf
    s = s & "End Sub" & vbCrLf
    GetFormCode = s
End Function

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'~   LOGIC SUBROUTINES CALLED BY THE FORM
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MarkRow(status As String, frm As Object)
    ws.Cells(currentRow, attendanceCol).Value = status
    
    If applyColoring Then
        Dim colorRange As Range
        ' The range now correctly includes the attendance column itself
        Set colorRange = ws.Range(ws.Cells(currentRow, 1), ws.Cells(currentRow, attendanceCol))
        
        If status = "P" Then
            colorRange.Interior.Color = RGB(198, 239, 206) ' Light Green
        Else
            colorRange.Interior.Color = RGB(255, 199, 206) ' Light Red
        End If
    End If
    
    ' Logic to handle returning from edit mode or moving to the next row
    If isEditingMode Then
        currentRow = resumeRow
        isEditingMode = False
    Else
        currentRow = currentRow + 1
    End If
    
    Call ShowNextRow(frm)
End Sub

Public Sub ShowNextRow(frm As Object)
    ' Check if we are done with normal marking
    If Not isEditingMode And currentRow > lastRow Then
        MsgBox "Attendance marking complete!", vbInformation, "Finished"
        Unload frm
        Exit Sub
    End If
    
    ' Scrolling logic to show current row and last 3 for context
    Dim topRow As Long
    topRow = currentRow - 3
    If topRow < 1 Then topRow = 1
    Application.Goto ws.Rows(topRow), Scroll:=True
    ws.Rows(currentRow).Select
    
    frm.Caption = "Marking Row: " & currentRow
    
        ' CUSTOMIZE COLUMNS TO DISPLAY
    ' Edit the line below to choose which columns appear in the dialog box.
    ' 1 = Column A, 2 = Column B, 3 = Column C, and so on.
    ' The order of numbers in the Array determines the display order.
    
    Dim columnsToShow As Variant
    columnsToShow = Array(2, 3, 4, 5, 6, 7, 8) ' <-- **** EDIT THIS LINE ****

    ' End of Customization

    ' Display row info in the form's label
    Dim infoString As String
    Dim colNum As Variant
    infoString = ""
    For Each colNum In columnsToShow
        infoString = infoString & ws.Cells(1, colNum).Value & ": " & ws.Cells(currentRow, colNum).Value & vbCrLf & vbCrLf
    Next colNum
    
    frm.lblInfo.Caption = infoString
End Sub

